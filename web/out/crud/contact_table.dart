// Auto-generated from contact_table.html.
// DO NOT EDIT.

library contact_table;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import 'contact_add.dart';
import 'contact_edit.dart';
import 'dart:html';
import 'package:web_ui/web_ui.dart';



class ContactTable extends WebComponent with Observable  {
  /** Autogenerated from the template. */

  autogenerated.ScopedCssMapper _css;

  /** This field is deprecated, use getShadowRoot instead. */
  get _root => getShadowRoot("contact-table");
  static final __html1 = new autogenerated.Element.html('<div template="" if="showAddContact">\n          <span is="contact-add">\n          </span>\n        </div>', treeSanitizer: autogenerated.nullTreeSanitizer), __html2 = new autogenerated.Element.html('<div template="" if="showEditContact">\n          <span is="contact-edit">\n          </span>\n        </div>', treeSanitizer: autogenerated.nullTreeSanitizer), __html3 = autogenerated.createSafeNode('tbody', {'template': '','repeat': 'contact in contactlist.internalList'},'\n            <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n              <td><button>Edit</button></td>\n              <td><button>Remove</button></td>\n            </tr>\n          '), __shadowTemplate = new autogenerated.DocumentFragment.html('''
        <div style="display:none"></div>
        <div style="display:none"></div>
        <table>
          <caption class="marker">
            <button id="addContactButton">Ajouter un contact</button>
            Contact List
          </caption>
          <tbody><tr>
          
            <th>Nom</th>
            <th>Prenom</th>
            <th>Email</th>
            <th>Edit</th>
            <th>Remove</th>
            
          </tr>
          </tbody><tbody style="display:none"></tbody>
        </table>
        <br>
      ''', treeSanitizer: autogenerated.nullTreeSanitizer);
  autogenerated.ButtonElement __e8;
  autogenerated.DivElement __e4, __e7;
  autogenerated.TableSectionElement __e18;
  autogenerated.Template __t;

  void created_autogenerated() {
    var __root = createShadowRoot("contact-table");
    setScopedCss("contact-table", new autogenerated.ScopedCssMapper({"contact-table":"[is=\"contact-table\"]"}));
    _css = getScopedCss("contact-table");
    __t = new autogenerated.Template(__root);
    __root.nodes.add(__shadowTemplate.clone(true));
    __e4 = __root.nodes[1];
    __t.conditional(__e4, () => showAddContact, (__t) {
      var __e2, __e3;
      __e3 = __html1.clone(true);
      __e2 = __e3.nodes[1];
      __t.oneWayBind(() =>  contactlist , (e) { if (__e2.xtag.contactlist != e) __e2.xtag.contactlist = e; }, false, false);
      __t.component(new ContactAdd()..host = __e2);
    __t.add(__e3);
    });

    __e7 = __root.nodes[3];
    __t.conditional(__e7, () => showEditContact, (__t) {
      var __e5, __e6;
      __e6 = __html2.clone(true);
      __e5 = __e6.nodes[1];
      __t.oneWayBind(() =>  contact , (e) { if (__e5.xtag.contact != e) __e5.xtag.contact = e; }, false, false);
      __t.oneWayBind(() =>  contactlist , (e) { if (__e5.xtag.contactlist != e) __e5.xtag.contactlist = e; }, false, false);
      __t.component(new ContactEdit()..host = __e5);
    __t.add(__e6);
    });

    __e8 = __root.nodes[5].nodes[1].nodes[1];
    __t.listen(__e8.onClick, ($event) { add(); });
    __e18 = __root.nodes[5].nodes[4];
    __t.loop(__e18, () => contactlist.internalList, ($list, $index, __t) {
      var contact = $list[$index];
      var __e10, __e12, __e14, __e15, __e16, __e17;
      __e17 = __html3.clone(true);
      __e10 = __e17.nodes[1].nodes[1];
      var __binding9 = __t.contentBind(() =>  contact.nom , false);
      __e10.nodes.add(__binding9);
      __e12 = __e17.nodes[1].nodes[3];
      var __binding11 = __t.contentBind(() =>  contact.prenom , false);
      __e12.nodes.add(__binding11);
      __e14 = __e17.nodes[1].nodes[5];
      var __binding13 = __t.contentBind(() =>  contact.email , false);
      __e14.nodes.add(__binding13);
      __e15 = __e17.nodes[1].nodes[7].nodes[0];
      __t.listen(__e15.onClick, ($event) { edit(contact); });
      __e16 = __e17.nodes[1].nodes[9].nodes[0];
      __t.listen(__e16.onClick, ($event) { delete(contact); });
    __t.add(__e17);
    });
    __t.create();
  }

  void inserted_autogenerated() {
    __t.insert();
  }

  void removed_autogenerated() {
    __t.remove();
    __t = __e4 = __e7 = __e8 = __e18 = null;
  }

  /** Original code from the component. */

  ContactList contactlist;
  Contact contact;
  bool __$showAddContact = false;
  bool get showAddContact {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'showAddContact');
    }
    return __$showAddContact;
  }
  set showAddContact(bool value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'showAddContact',
          __$showAddContact, value);
    }
    __$showAddContact = value;
  }
  bool __$showEditContact = false;
  bool get showEditContact {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'showEditContact');
    }
    return __$showEditContact;
  }
  set showEditContact(bool value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'showEditContact',
          __$showEditContact, value);
    }
    __$showEditContact = value;
  }
  

  add() {
    ButtonElement addContact = query("#addContactButton");
    if (addContact.text == 'Ajouter un contact') {
      showAddContact = true;
      addContact.text = '';
    } else {
      showAddContact = false;
      addContact.text = 'Ajouter un contact';
    }
  }

  edit(Contact contact) {
    showEditContact = true;
    showAddContact = false;
    this.contact = contact;
  }

  delete(Contact contact) {
    contactlist.remove(contact);
  }
  
}
//# sourceMappingURL=contact_table.dart.map